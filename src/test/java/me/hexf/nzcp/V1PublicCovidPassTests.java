package me.hexf.nzcp;

import foundation.identity.did.DIDDocument;
import foundation.identity.did.VerificationMethod;
import me.hexf.nzcp.exceptions.*;
import me.hexf.nzcp.resolvers.StaticResolver;
import org.junit.Test;

import java.net.URI;
import java.net.URISyntaxException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Map;
import java.util.UUID;
import static org.junit.Assert.*;

public class V1PublicCovidPassTests {
    public static final String
    public static final String
    public static final String
    public static final String
    public static final String
    public static final String
    public static final String


    public static final StaticResolver MOCK_RESOLVER = new StaticResolver.Builder()
            .addDocument(
                    URI.create("did:web:nzcp.covid19.health.nz"),
                    DIDDocument.builder()
                            .assertionMethodVerificationMethod(
                                    VerificationMethod.builder()
                                            .id(URI.create("did:web:nzcp.covid19.health.nz#key-1"))
                                            .publicKeyJwk(Map.of(
                                                    "kty", "EC",
                                                    "crv", "P-256",
                                                    "x", "zRR-XGsCp12Vvbgui4DD6O6cqmhfPuXMhi1OxPl8760",
                                                    "y", "Iv5SU6FuW-TRYh5_GOrJlcV_gpF_GpFQhCOD8LSk3T0"
                                            ))
                                            .build()
                            )
                            .build()
            )
            .build();

    public static Verifier VERIFIER = new Verifier.Builder()
        .addExampleTrustedIssuer()
        .setResolver(MOCK_RESOLVER)
        .build();

    @Test
    public void testQRCodeDecode() throws DecodingException, URISyntaxException {
        // Taken from https://nzcp.covid19.health.nz/#valid-worked-example

        CovidPass pass = CovidPass.createFromQRCodeString(VALID_PAYLOAD);

        assertEquals(pass.getKeyId(), "key-1");
        assertEquals(pass.getId(), UUID.fromString("60a4f54d-4e30-4332-be33-ad78b1eafa4b"));
        assertEquals(pass.getIssuer(), new URI("did:web:nzcp.covid19.health.nz"));
        assertEquals(pass.getNotValidAfter(), LocalDateTime.ofEpochSecond(1951416330L, 0, ZoneOffset.UTC));
        assertEquals(pass.getNotValidBefore(), LocalDateTime.ofEpochSecond(1635883530L, 0, ZoneOffset.UTC));

        assertEquals(pass.getCredentialSubject(),
                new CredentialSubject(
                        "Jack",
                        "Sparrow",
                        LocalDate.of(1960, 4, 16)
                )
            );
    }

    @Test
    public void verifyValidQRCode() throws DecodingException, DocumentResolvingException, VerificationException, NoSuchAlgorithmException, SignatureException, URISyntaxException, InvalidKeyException {
        CovidPass pass = CovidPass.createFromQRCodeString(VALID_PAYLOAD);
        Verifier.VerificationResult result = VERIFIER.verify(pass);

        assertTrue(result.isTrustedIssuer());
        assertFalse(result.isExpired());
    }

    @Test
    public void verifyBadPKQRCode() throws DecodingException {
        CovidPass pass = CovidPass.createFromQRCodeString(BAD_PUBLIC_KEY_PAYLOAD);

        assertThrows(SignatureMismatchException.class, () -> VERIFIER.verify(pass));
    }

    @Test
    public void verifyUnlocatablePKQRCode() throws DecodingException {
        CovidPass pass = CovidPass.createFromQRCodeString(UNLOCATABLE_PUBLIC_KEY_PAYLOAD);

        assertThrows(KeyNotFoundException.class, () -> VERIFIER.verify(pass));
    }

    @Test
    public void verifyModifiedSignatureQRCode() throws DecodingException {
        CovidPass pass = CovidPass.createFromQRCodeString(MODIFIED_SIGNATURE_PAYLOAD);

        assertThrows(SignatureMismatchException.class, () -> VERIFIER.verify(pass));
    }

    @Test
    public void verifyModifiedPayloadQRCode() throws DecodingException {
        CovidPass pass = CovidPass.createFromQRCodeString(MODIFIED_PAYLOAD_PAYLOAD);

        assertThrows(SignatureMismatchException.class, () -> VERIFIER.verify(pass));
    }

    @Test
    public void verifyExpiredPayload() throws DecodingException, DocumentResolvingException, VerificationException, NoSuchAlgorithmException, SignatureException, URISyntaxException, InvalidKeyException {
        CovidPass pass = CovidPass.createFromQRCodeString(EXPIRED_PAYLOAD);
        Verifier.VerificationResult result = VERIFIER.verify(pass);

        assertTrue(result.isTrustedIssuer());
        assertTrue(result.isExpired());
    }

    @Test
    public void verifyBeforeValidPayload() throws DecodingException, DocumentResolvingException, VerificationException, NoSuchAlgorithmException, SignatureException, URISyntaxException, InvalidKeyException {
        CovidPass pass = CovidPass.createFromQRCodeString(BEFORE_VALID_PAYLOAD);
        Verifier.VerificationResult result = VERIFIER.verify(pass);

        assertTrue(result.isTrustedIssuer());
        assertTrue(result.isExpired());
    }

}
